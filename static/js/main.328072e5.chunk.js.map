{"version":3,"sources":["Home.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkInput","document","getElementById","value","state","correctWord","updateStatusScore","updateWord","showStatus","skipWord","updateLife","error","isLoaded","words","shuffledWord","index","score","life","array","Math","floor","random","length","setState","shuffleWord","word","i","j","temp","wordarray","split","join","deletedWord","filter","pickRandomWord","endgame","win","finalscore","style","display","innerHTML","status","_this2","checkLife","_this3","fetch","then","res","text","result","responsearray","trim","_this4","react_default","a","createElement","id","className","autoComplete","type","name","placeholder","onClick","Component","App","src_Home_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.328072e5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Home.css'\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            words: [],\n            correctWord: \"\",\n            shuffledWord: \"\",\n            index: 0,\n            score: 0,\n            life: 3\n        };\n    }\n\n    pickRandomWord(array) {\n        let index = Math.floor(Math.random() * array.length);\n        this.setState({\n            index: index,\n            correctWord: array[index]\n        });\n        this.shuffleWord(array[index]);\n    }\n    \n    /* Fisher-Yates shuffle */\n    shuffleWord(word) {\n        let i = 0, j = 0, temp = null;\n        let wordarray = word.split(\"\");\n        do {\n            for(i = wordarray.length - 1; i > 0; i--) {\n                j = Math.floor(Math.random() * (i + 1));\n                temp = wordarray[i];\n                wordarray[i] = wordarray[j];\n                wordarray[j] = temp;\n            }\n        } while (wordarray.join(\"\") === word);\n        this.setState({\n            shuffledWord: wordarray.join(\"\")\n        });\n    }\n\n    updateWord() {\n        let deletedWord = this.state.words[this.state.index];\n        this.setState({\n            words: this.state.words.filter(function(word) { \n            return word !== deletedWord\n        })})\n        if (this.state.words.length) {\n            this.pickRandomWord(this.state.words);\n        } else {\n            this.endgame(true,this.state.score);\n        }\n    }\n\n    checkLife() {\n        if (this.state.life === 0) {\n            this.endgame(false,this.state.score);\n        }\n    }\n\n    endgame(win,finalscore) {\n        document.getElementById('main').style.display = \"none\";\n        document.getElementById('end-game').style.display = \"block\";\n        document.getElementById('final-score').innerHTML = finalscore;\n        if (win) {\n            document.getElementById('end-status').innerHTML = \"YOU WIN!\";\n        } else {\n            document.getElementById('end-status').innerHTML = \"GAME OVER!\";\n        }\n    }\n\n    showStatus(status){\n        if (status === true) {\n            document.getElementById('status').innerHTML = \"<h2>BENAR! Poin Anda : \" + this.state.score + \"<h2>\";\n            document.getElementById('input-word').value = \"\";\n        } else {\n            document.getElementById('status').innerHTML = \"<h2>SALAH! Silakan coba lagi.<h2>\";\n        }\n    }\n\n    updateStatusScore() {\n        this.setState({\n            score: this.state.score + 1\n        }, () => this.showStatus(true));\n    }\n\n    updateLife() {\n        this.setState({\n            life: this.state.life - 1\n        }, this.checkLife);\n    }\n\n    checkInput = () => {\n        let input = document.getElementById('input-word').value;\n        if (input === this.state.correctWord) {\n            this.updateStatusScore();\n            this.updateWord();\n        } else {\n            this.showStatus(false);\n        }\n    }\n\n    skipWord = () => {\n        this.updateWord();\n        this.updateLife();\n    }\n\n    componentDidMount() {\n        fetch(\"https://prisilamichelle.github.io/kata.txt\")\n            .then(res => res.text())\n            .then(\n                (result) => {\n                    let responsearray = result.split(\",\");\n                    responsearray[responsearray.length-1] = responsearray[responsearray.length-1].trim();\n                    this.setState({\n                        isLoaded: true,\n                        words: responsearray\n                    });\n                    this.pickRandomWord(responsearray);\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        let shuffledWord = this.state.shuffledWord;\n        let score = this.state.score;\n        let life = this.state.life;\n        return (\n            <div>\n                <div id=\"main\">\n                    <div id=\"box-input\" className=\"center small\">\n                        <h1>Acak Kata</h1>\n                        <table className=\"number\">\n                            <tbody>\n                                <tr>\n                                    <td><span>Score :</span><span id=\"score\">{score}</span></td>\n                                    <td><span>Life :</span><span id=\"life\">{life}</span></td>\n                                </tr>\n                            </tbody>            \n                        </table>\n\n                        <form id=\"input-form\" autoComplete=\"off\">\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <td><span>Tebak kata :</span></td>\n                                        <td><span id=\"shuffled-word\">{shuffledWord}</span></td>\n                                    </tr>\n                                    <tr>\n                                        <td><span>Jawab :</span></td>\n                                        <td><input id=\"input-word\" type=\"text\" name=\"input-word\" placeholder=\"Masukkan jawaban...\"/></td>\n                                    </tr>\n                                    <tr>\n                                        <td><button id=\"btn-skip\" className=\"btn-primary\" type=\"button\" onClick={() => this.skipWord()} >Skip</button></td>\n                                        <td><button id=\"btn-enter\" className=\"btn-primary\" type=\"button\" onClick={() => this.checkInput()} >Enter</button></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </form>\n\n                        <div id=\"status\"></div>\n                        <div id=\"failure-notif\"></div>\n                    </div>\n                </div>\n                <div id=\"end-game\">\n                    <span id=\"end-status\"></span>\n                    <span>Score :</span><span id=\"final-score\"></span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}